name: Integration Workflow

on:
  push:
    branches:
      - "main"
      - "develop"
      - "*.latest"
      - "releases/*"
  pull_request:
  workflow_dispatch:

permissions: read-all

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ contains(github.event_name, 'pull_request') && github.event.pull_request.head.ref || github.sha }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  code-quality:
    name: Code Quality

    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Create a virtual environment
        run: python3 -m venv venv

      - name: Set up Python
        uses: actions/setup-python@v4

      - name: Install python dependencies
        run: |
          source venv/bin/activate
          pip install --upgrade pip
          pip install pre-commit
          pip install mypy==0.782
          pip install flake8
          pip install black
          pip install dbt
          pip install hatch
          pip install twine
          pip --version
          pre-commit --version
          mypy --version
          dbt --version

      - name: Run pre-commit hooks
        run: |
          source venv/bin/activate
          pre-commit run --all-files

  build:
    name: Build Packages

    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Create a virtual environment
        run: python3 -m venv venv

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install python dependencies
        run: |
          source venv/bin/activate
          pip install  --upgrade pip
          pip install setuptools wheel  check-wheel-contents
          pip --version
      - name: Build distributions
        run: |
          source venv/bin/activate
          ./scripts/build-dist.sh

      - name: Show distributions
        run: ls -lh dist/

      - name: Check distribution descriptions
        run: |
          source venv/bin/activate
          pip install twine
          pip show twine
          twine check dist/*
          
      - name: Check wheel contents
        run: |
          source venv/bin/activate
          check-wheel-contents dist/*.whl --ignore W007,W008
      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  test-build:
    name: Verify Packages / Python ${{ matrix.python-version }} / ${{ matrix.os }}

    needs: build

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11']

    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install PostgreSQL on macOS
        if: runner.os == 'macOS'
        run: |
          brew install postgresql

      - name: Create a virtual environment
        run: python3 -m venv venv

      - name: Activate virtual environment and install dependencies
        run: |
          if [ $RUNNER_OS = 'Windows' ]; then
            .\\venv\\Scripts\\activate
          else
            source venv/bin/activate
          fi

          pip install --upgrade pip
          pip install --upgrade wheel
          pip --version

      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Show distributions
        run: ls -lh dist/

      - name: Install wheel distributions
        run: |
          if [ $RUNNER_OS = 'Windows' ]; then
            .\\venv\\Scripts\\activate
          else
            source venv/bin/activate
          fi
          find ./dist/*.whl -maxdepth 1 -type f | xargs pip install --force-reinstall --find-links=dist/

      - name: Check wheel distributions
        run: |
          if [ $RUNNER_OS = 'Windows' ]; then
            .\\venv\\Scripts\\activate
          else
            source venv/bin/activate
          fi
          dbt --version

      - name: Install source distributions
        run: |
          if [ $RUNNER_OS = 'Windows' ]; then
            .\\venv\\Scripts\\activate
          else
            source venv/bin/activate
          fi
          find ./dist/*.gz -maxdepth 1 -type f | xargs pip install --force-reinstall --find-links=dist/

      - name: Check source distributions
        run: |
          if [ $RUNNER_OS = 'Windows' ]; then
            .\\venv\\Scripts\\activate
          else
            source venv/bin/activate
          fi
          dbt --version
